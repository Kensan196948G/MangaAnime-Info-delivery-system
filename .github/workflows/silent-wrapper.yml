name: Silent Workflow Wrapper

# このワークフローは失敗通知を抑制するラッパーです
# 他のワークフローの失敗を検知して、静かに処理します

on:
  workflow_run:
    workflows: 
      - "MangaAnime Auto Deployment"
      - "Simple CI Pipeline"
      - "Security Audit & Quality Assurance"
      - "MangaAnime System Health Check"
    types: [completed]

jobs:
  silent-handler:
    name: Silent Error Handler
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'failure'
    
    # 通知を抑制するための設定
    continue-on-error: true  # エラーでも成功扱い
    
    steps:
      - name: Log failure silently
        id: log
        run: |
          echo "📝 Workflow failed: ${{ github.event.workflow_run.name }}"
          echo "🔇 Notification suppressed"
          echo "failure_logged=true" >> $GITHUB_OUTPUT
          
      - name: Create internal issue (no email)
        if: steps.log.outputs.failure_logged == 'true'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            // Issueを作成（メール通知なし）
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'silent-failure',
              state: 'open'
            });
            
            const workflowName = context.payload.workflow_run.name;
            const exists = issues.data.find(i => i.title.includes(workflowName));
            
            if (!exists) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🔇 Silent: ${workflowName} Failed`,
                body: `Failure logged without email notification.\nWorkflow: ${workflowName}\nTime: ${new Date().toISOString()}`,
                labels: ['silent-failure', 'auto-repair-7x']
              });
            }
      
      - name: Always succeed
        if: always()
        run: |
          echo "✅ Wrapper completed successfully (failure handled silently)"
          exit 0  # 常に成功として終了