name: System Health Check (Fixed)
true:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
  schedule:
  - cron: 0 */6 * * *
  workflow_dispatch: null
env:
  PYTHON_VERSION: '3.11'
  TEST_MODE: true
jobs:
  system-health:
    name: System Health Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install dependencies
      run: 'python -m pip install --upgrade pip

        pip install -r requirements.txt

        pip install flask  # Add Flask for WebUI

        '
    - name: Create test configuration
      run: "# Use the config template for CI testing\ncp config/config.template.json\
        \ config.json\n\n# Replace template placeholders with test values\nsed -i\
        \ 's/\"your-email@gmail.com\"/\"test@example.com\"/g' config.json\n\n# Add\
        \ minimal test configuration\ncat > config.json << 'EOF'\n{\n  \"ng_keywords\"\
        : [\"test\"],\n  \"notification_email\": \"test@example.com\",\n  \"email\"\
        : {\n    \"smtp_server\": \"smtp.gmail.com\",\n    \"smtp_port\": 587,\n \
        \   \"sender_email\": \"test@example.com\",\n    \"sender_password\": \"${GMAIL_APP_PASSWORD}\"\
        ,\n    \"use_tls\": true,\n    \"enabled\": false\n  },\n  \"error_notifications\"\
        : {\n    \"enabled\": false,\n    \"recipient_email\": \"test@example.com\"\
        ,\n    \"smtp_server\": \"smtp.gmail.com\",\n    \"smtp_port\": 587,\n   \
        \ \"sender_email\": \"test@example.com\",\n    \"sender_password\": \"${GMAIL_APP_PASSWORD}\"\
        ,\n    \"use_tls\": true\n  },\n  \"apis\": {\n    \"anilist\": {\n      \"\
        graphql_url\": \"https://graphql.anilist.co\"\n    }\n  },\n  \"notifications\"\
        : {\n    \"anime\": true,\n    \"manga\": true\n  },\n  \"database\": {\n\
        \    \"path\": \"./test.db\"\n  },\n  \"system\": {\n    \"name\": \"Test\
        \ System\"\n  }\n}\nEOF\n"
    - name: Test Core Modules
      run: "python -c \"\nimport sys\nsys.path.insert(0, '.')\n\ntry:\n    import\
        \ modules.config\n    import modules.db\n    import modules.monitoring\n \
        \   print('\u2705 Core modules imported successfully')\nexcept ImportError\
        \ as e:\n    print(f'\u274C Core module import failed: {e}')\n    exit(1)\n\
        \"\n"
    - name: Test WebUI Module (Optional)
      run: "python -c \"\nimport sys\nsys.path.insert(0, '.')\n\ntry:\n    import\
        \ web_ui\n    print('\u2705 WebUI module imported successfully')\nexcept ImportError\
        \ as e:\n    print(f'\u26A0\uFE0F WebUI module import failed (Flask required):\
        \ {e}')\n    # Don't fail - WebUI is optional\n\"\n"
    - name: Test Database Operations
      run: "python -c \"\nimport sys\nsys.path.insert(0, '.')\n\nfrom modules.db import\
        \ DatabaseManager\n\n# Test with temporary database\ndb = DatabaseManager('./test.db')\n\
        db.initialize_database()\nprint('\u2705 Database initialization successful')\n\
        \n# Test basic operations\nwork_id = db.get_or_create_work('Test Work', work_type='anime')\n\
        if work_id:\n    print('\u2705 Database operations successful')\nelse:\n \
        \   print('\u274C Database operations failed')\n    exit(1)\n\"\n"
    - name: Test Configuration Loading
      run: "python -c \"\nimport sys\nsys.path.insert(0, '.')\n\nfrom modules.config\
        \ import ConfigManager\n\nconfig = ConfigManager()\nsystem_name = config.get_system_name()\n\
        print(f'\u2705 Configuration loaded: {system_name}')\n\"\n"
    - name: System Integration Test
      run: "python -c \"\nimport sys\nsys.path.insert(0, '.')\n\n# Test complete system\
        \ integration\ntry:\n    from modules.config import ConfigManager\n    from\
        \ modules.db import DatabaseManager\n    from modules.monitoring import get_collection_health_status\n\
        \    \n    print('\u2705 System integration test successful')\n    \nexcept\
        \ Exception as e:\n    print(f'\u274C System integration test failed: {e}')\n\
        \    exit(1)\n\"\n"
    - name: Cleanup
      run: "rm -f test.db config.json\necho \"\u2705 Test cleanup completed\""
permissions:
  contents: read
  issues: write
  actions: read
