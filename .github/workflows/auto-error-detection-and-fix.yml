name: Auto Error Detection & Fix System

on:
  schedule:
    # Run every 1 hour for continuous monitoring
    - cron: '0 */1 * * *'
  workflow_dispatch:
    inputs:
      detection_type:
        description: 'Type of error detection to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - dependencies
        - security
        - formatting
        - configuration
        - health-check
      auto_fix:
        description: 'Automatically apply fixes and create PR'
        required: false
        default: true
        type: boolean
      create_issue:
        description: 'Create GitHub Issue for detected problems'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  AUTO_FIX_BRANCH: 'auto-fix'

permissions:
  contents: write
  issues: write
  pull-requests: write
  checks: read
  actions: read

jobs:
  # Job 1: Error Detection & Analysis
  error-detection:
    name: Error Detection & Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      has_dependency_issues: ${{ steps.analyze.outputs.has_dependency_issues }}
      has_security_issues: ${{ steps.analyze.outputs.has_security_issues }}
      has_formatting_issues: ${{ steps.analyze.outputs.has_formatting_issues }}
      has_config_issues: ${{ steps.analyze.outputs.has_config_issues }}
      has_health_issues: ${{ steps.analyze.outputs.has_health_issues }}
      fix_needed: ${{ steps.analyze.outputs.fix_needed }}
      error_summary: ${{ steps.analyze.outputs.error_summary }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y jq sqlite3
        
    - name: Install analysis tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit flake8 black isort pip-audit || true
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt || true
        fi
        
    - name: Dependency vulnerability scan
      id: deps
      run: |
        echo "🔍 Scanning dependencies for vulnerabilities..."
        
        # Check for outdated packages
        pip list --outdated --format=json > outdated-packages.json 2>/dev/null || echo "[]" > outdated-packages.json
        outdated_count=$(cat outdated-packages.json | jq length 2>/dev/null || echo "0")
        echo "outdated_count=$outdated_count" >> $GITHUB_OUTPUT
        
        # Security vulnerabilities
        safety check --json --output=safety-report.json 2>/dev/null || true
        pip-audit --format=json --output=pip-audit-report.json 2>/dev/null || true
        
        # Count security issues
        security_issues=0
        if [ -f safety-report.json ]; then
          security_issues=$(cat safety-report.json | jq '.vulnerabilities | length' 2>/dev/null || echo "0")
        fi
        echo "security_issues=$security_issues" >> $GITHUB_OUTPUT
        
    - name: Code quality & formatting scan
      id: quality
      run: |
        echo "🔍 Checking code quality and formatting..."
        
        # Code formatting issues
        formatting_issues=0
        if [ -d "modules/" ]; then
          if ! black --check modules/ 2>/dev/null; then
            formatting_issues=$((formatting_issues + 1))
          fi
          
          if ! isort --check-only modules/ 2>/dev/null; then
            formatting_issues=$((formatting_issues + 1))
          fi
        fi
        
        echo "formatting_issues=$formatting_issues" >> $GITHUB_OUTPUT
        
        # Linting issues
        if [ -d "modules/" ]; then
          flake8 modules/ --count --statistics --output-file=flake8-report.txt 2>/dev/null || true
          linting_issues=$(grep -E "^[0-9]+" flake8-report.txt 2>/dev/null | tail -1 | awk '{print $1}' 2>/dev/null || echo "0")
        else
          linting_issues=0
        fi
        echo "linting_issues=$linting_issues" >> $GITHUB_OUTPUT
        
    - name: Security scan
      id: security
      run: |
        echo "🔍 Running security analysis..."
        
        # Bandit security scan
        bandit_issues=0
        if [ -d "modules/" ]; then
          bandit -r modules/ -f json -o bandit-report.json 2>/dev/null || true
          if [ -f bandit-report.json ]; then
            bandit_issues=$(cat bandit-report.json | jq '.results | length' 2>/dev/null || echo "0")
          fi
        fi
        echo "bandit_issues=$bandit_issues" >> $GITHUB_OUTPUT
        
    - name: Configuration audit
      id: config
      run: |
        echo "🔍 Auditing configuration files..."
        
        config_issues=0
        
        # Check for missing required config sections
        if [ -f config.json ]; then
          required_sections=("system" "database" "apis" "email" "notifications")
          for section in "${required_sections[@]}"; do
            if ! grep -q "\"$section\"" config.json; then
              config_issues=$((config_issues + 1))
              echo "⚠️ Missing config section: $section"
            fi
          done
        fi
        
        # Check for insecure configurations
        if grep -q '"debug".*true' config.json 2>/dev/null; then
          config_issues=$((config_issues + 1))
          echo "⚠️ Debug mode enabled in production config"
        fi
        
        echo "config_issues=$config_issues" >> $GITHUB_OUTPUT
        
    - name: System health check
      id: health
      run: |
        echo "🔍 Checking system health..."
        
        health_issues=0
        
        # Check for broken imports
        if [ -d "modules/" ]; then
          for module in modules/*.py; do
            if [ -f "$module" ]; then
              python -m py_compile "$module" 2>/dev/null || {
                health_issues=$((health_issues + 1))
                echo "⚠️ Syntax error in $module"
              }
            fi
          done
        fi
        
        # Check for missing files
        required_files=("requirements.txt" "config.json.template")
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            health_issues=$((health_issues + 1))
            echo "⚠️ Missing required file: $file"
          fi
        done
        
        echo "health_issues=$health_issues" >> $GITHUB_OUTPUT
        
    - name: Analyze results and determine actions
      id: analyze
      run: |
        echo "📊 Analyzing detection results..."
        
        # Get all issue counts
        outdated_count="${{ steps.deps.outputs.outdated_count }}"
        security_issues="${{ steps.deps.outputs.security_issues }}"
        formatting_issues="${{ steps.quality.outputs.formatting_issues }}"
        linting_issues="${{ steps.quality.outputs.linting_issues }}"
        bandit_issues="${{ steps.security.outputs.bandit_issues }}"
        config_issues="${{ steps.config.outputs.config_issues }}"
        health_issues="${{ steps.health.outputs.health_issues }}"
        
        # Determine if fixes are needed
        has_dependency_issues=false
        has_security_issues=false
        has_formatting_issues=false
        has_config_issues=false
        has_health_issues=false
        
        if [ "$outdated_count" -gt 0 ] || [ "$security_issues" -gt 0 ]; then
          has_dependency_issues=true
        fi
        
        if [ "$bandit_issues" -gt 0 ]; then
          has_security_issues=true
        fi
        
        if [ "$formatting_issues" -gt 0 ]; then
          has_formatting_issues=true
        fi
        
        if [ "$config_issues" -gt 0 ]; then
          has_config_issues=true
        fi
        
        if [ "$health_issues" -gt 0 ]; then
          has_health_issues=true
        fi
        
        # Overall fix needed determination
        fix_needed=false
        if [ "$has_dependency_issues" = true ] || [ "$has_security_issues" = true ] || \
           [ "$has_formatting_issues" = true ] || [ "$has_config_issues" = true ] || \
           [ "$has_health_issues" = true ]; then
          fix_needed=true
        fi
        
        # Create error summary
        error_summary="## 🔍 Auto-Detection Results\n\n"
        error_summary+="**Dependencies:** $outdated_count outdated, $security_issues security issues\n"
        error_summary+="**Code Quality:** $formatting_issues formatting, $linting_issues linting issues\n"
        error_summary+="**Security:** $bandit_issues potential vulnerabilities\n"
        error_summary+="**Configuration:** $config_issues issues found\n"
        error_summary+="**Health:** $health_issues system issues\n\n"
        
        if [ "$fix_needed" = true ]; then
          error_summary+="🔧 **Auto-fix recommended**"
        else
          error_summary+="✅ **No issues requiring immediate attention**"
        fi
        
        # Set outputs
        echo "has_dependency_issues=$has_dependency_issues" >> $GITHUB_OUTPUT
        echo "has_security_issues=$has_security_issues" >> $GITHUB_OUTPUT
        echo "has_formatting_issues=$has_formatting_issues" >> $GITHUB_OUTPUT
        echo "has_config_issues=$has_config_issues" >> $GITHUB_OUTPUT
        echo "has_health_issues=$has_health_issues" >> $GITHUB_OUTPUT
        echo "fix_needed=$fix_needed" >> $GITHUB_OUTPUT
        echo "error_summary<<EOF" >> $GITHUB_OUTPUT
        echo -e "$error_summary" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Upload detection reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: error-detection-reports
        path: |
          outdated-packages.json
          safety-report.json
          pip-audit-report.json
          flake8-report.txt
          bandit-report.json
        if-no-files-found: ignore
        retention-days: 7