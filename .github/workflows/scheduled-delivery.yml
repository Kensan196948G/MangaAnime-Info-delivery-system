name: Scheduled Email Delivery

on:
  schedule:
    # 毎日 日本時間 朝8時 (UTC 23:00)
    - cron: '0 23 * * *'
    
    # 毎日 日本時間 夜20時 (UTC 11:00)
    - cron: '0 11 * * *'
    
  # 手動実行も可能
  workflow_dispatch:
    inputs:
      send_immediately:
        description: 'Send notifications immediately'
        required: false
        default: 'true'
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  TZ: 'Asia/Tokyo'

jobs:
  email-delivery:
    name: Send Email Notifications
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Set up environment
        run: |
          # .envファイルから環境変数を設定
          if [ -f .env ]; then
            export $(cat .env | grep -v '^#' | xargs)
          fi
          
          # GitHub Secretsから設定（優先）
          echo "GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }}" >> $GITHUB_ENV
          
      - name: Check for new releases
        id: check
        run: |
          python -c "
          import sqlite3
          conn = sqlite3.connect('db.sqlite3')
          cursor = conn.cursor()
          cursor.execute('SELECT COUNT(*) FROM releases WHERE notified = 0')
          pending = cursor.fetchone()[0]
          print(f'pending_count={pending}')
          conn.close()
          " >> $GITHUB_OUTPUT
          
      - name: Send notifications
        if: steps.check.outputs.pending_count > 0
        run: |
          echo "📧 配信開始: $(date '+%Y-%m-%d %H:%M:%S JST')"
          echo "未送信通知: ${{ steps.check.outputs.pending_count }}件"
          
          # 通知を送信
          python release_notifier.py
          
      - name: Log results
        if: always()
        run: |
          echo "配信完了: $(date '+%Y-%m-%d %H:%M:%S JST')"
          
          # 結果をログに記録
          python -c "
          import sqlite3
          from datetime import datetime
          
          conn = sqlite3.connect('db.sqlite3')
          cursor = conn.cursor()
          
          # 通知済み件数を確認
          cursor.execute('SELECT COUNT(*) FROM releases WHERE notified = 1')
          notified = cursor.fetchone()[0]
          
          # 未通知件数を確認
          cursor.execute('SELECT COUNT(*) FROM releases WHERE notified = 0')
          pending = cursor.fetchone()[0]
          
          print(f'📊 配信統計')
          print(f'  通知済み: {notified}件')
          print(f'  未送信: {pending}件')
          print(f'  実行時刻: {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}')
          
          conn.close()
          "
          
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: delivery-logs-${{ github.run_number }}
          path: logs/