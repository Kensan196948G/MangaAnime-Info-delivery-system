name: Security Audit & Quality Assurance
on:
  push:
    branches:
    - main
    - develop
  pull_request:
    branches:
    - main
  schedule:
  - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      audit_type:
        description: Type of security audit to run
        required: true
        default: full
        type: choice
        options:
        - full
        - dependencies
        - secrets
        - code-quality
        - configuration

env:
  PYTHON_VERSION: '3.11'

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write
  actions: read
  security-events: write

jobs:
  dependency-security-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ inputs.audit_type == 'full' || inputs.audit_type == 'dependencies' || !inputs.audit_type }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-security-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-security-
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        
        # Install security tools with error handling
        echo "Installing security scanning tools..."
        
        # Install tools individually with error handling
        pip install safety || echo "‚ö†Ô∏è Safety installation failed, continuing..."
        pip install bandit || echo "‚ö†Ô∏è Bandit installation failed, continuing..."
        pip install pip-audit || echo "‚ö†Ô∏è pip-audit installation failed, continuing..."
        
        # Skip semgrep if it fails (has complex dependencies)
        pip install semgrep || echo "‚ö†Ô∏è Semgrep installation failed, will skip semgrep checks"
        
        # Verify what was installed
        echo "Installed security tools:"
        pip list | grep -E "(safety|bandit|pip-audit|semgrep)" || echo "Some tools may not have installed correctly"
        
    - name: Install project dependencies
      run: |
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt || echo "‚ö†Ô∏è Some project dependencies failed to install"
        else
          echo "‚ö†Ô∏è requirements.txt not found, creating minimal one for testing"
          echo "flask" > requirements.txt
          pip install flask
        fi
        
    - name: Run Safety check
      continue-on-error: true
      run: |
        if command -v safety >/dev/null 2>&1; then
          echo "üîç Running Safety vulnerability scan..."
          safety check --json > safety-report.json 2>/dev/null || {
            echo "‚ö†Ô∏è Safety scan completed with warnings"
            safety check || echo "Safety found vulnerabilities or failed"
          }
        else
          echo "‚ö†Ô∏è Safety not available, skipping vulnerability scan"
        fi
        
    - name: Run Bandit security analysis
      continue-on-error: true
      run: |
        if command -v bandit >/dev/null 2>&1; then
          echo "üîç Running Bandit security analysis..."
          bandit -r . -f json -o bandit-report.json 2>/dev/null || {
            echo "‚ö†Ô∏è Bandit scan completed with warnings"
            bandit -r . || echo "Bandit found security issues or failed"
          }
        else
          echo "‚ö†Ô∏è Bandit not available, skipping security analysis"
        fi
        
    - name: Run pip-audit
      continue-on-error: true
      run: |
        if command -v pip-audit >/dev/null 2>&1; then
          echo "üîç Running pip-audit..."
          pip-audit --format=json --output=pip-audit-report.json || {
            echo "‚ö†Ô∏è pip-audit completed with findings"
            pip-audit || echo "pip-audit found vulnerabilities or failed"
          }
        else
          echo "‚ö†Ô∏è pip-audit not available, skipping audit"
        fi
        
    - name: Run Semgrep (optional)
      continue-on-error: true
      run: |
        if command -v semgrep >/dev/null 2>&1; then
          echo "üîç Running Semgrep static analysis..."
          semgrep --config=auto --json --output=semgrep-report.json . || {
            echo "‚ö†Ô∏è Semgrep scan completed with findings"
            semgrep --config=auto . || echo "Semgrep found issues or failed"
          }
        else
          echo "‚ö†Ô∏è Semgrep not available, skipping static analysis"
        fi
        
    - name: Generate Security Summary
      run: |
        echo "# Security Audit Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Check for reports and summarize
        if [ -f "safety-report.json" ]; then
          echo "- ‚úÖ Safety vulnerability scan: Completed" >> security-summary.md
        else
          echo "- ‚ö†Ô∏è Safety vulnerability scan: Skipped or failed" >> security-summary.md
        fi
        
        if [ -f "bandit-report.json" ]; then
          echo "- ‚úÖ Bandit security analysis: Completed" >> security-summary.md
        else
          echo "- ‚ö†Ô∏è Bandit security analysis: Skipped or failed" >> security-summary.md
        fi
        
        if [ -f "pip-audit-report.json" ]; then
          echo "- ‚úÖ pip-audit dependency audit: Completed" >> security-summary.md
        else
          echo "- ‚ö†Ô∏è pip-audit dependency audit: Skipped or failed" >> security-summary.md
        fi
        
        if [ -f "semgrep-report.json" ]; then
          echo "- ‚úÖ Semgrep static analysis: Completed" >> security-summary.md
        else
          echo "- ‚ö†Ô∏è Semgrep static analysis: Skipped or failed" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## Recommendations" >> security-summary.md
        echo "- Review any identified vulnerabilities" >> security-summary.md
        echo "- Update dependencies regularly" >> security-summary.md
        echo "- Follow secure coding practices" >> security-summary.md
        echo "" >> security-summary.md
        echo "*Report generated on $(date)*" >> security-summary.md
        
        cat security-summary.md
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.sha }}
        path: |
          *-report.json
          security-summary.md
        retention-days: 30

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ inputs.audit_type == 'full' || inputs.audit_type == 'secrets' || !inputs.audit_type }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better secret detection
        
    - name: Install TruffleHog
      run: |
        # Install TruffleHog for secret scanning
        curl -sSfL https://github.com/trufflesecurity/trufflehog/releases/download/v3.63.2/trufflehog_3.63.2_linux_amd64.tar.gz | tar -xz -C /tmp
        sudo mv /tmp/trufflehog /usr/local/bin/
        
    - name: Run TruffleHog secrets scan
      continue-on-error: true
      run: |
        echo "üîç Scanning for secrets..."
        trufflehog git file://. --json > trufflehog-report.json 2>/dev/null || {
          echo "‚ö†Ô∏è TruffleHog scan completed with findings"
          trufflehog git file://. || echo "TruffleHog found potential secrets or failed"
        }
        
    - name: Manual secrets patterns check
      run: |
        echo "üîç Running manual secrets pattern check..."
        
        # Define patterns to search for
        patterns=(
          "password.*=.*['\"].*['\"]"
          "api_key.*=.*['\"].*['\"]"
          "secret.*=.*['\"].*['\"]"
          "token.*=.*['\"].*['\"]"
          "smtp_.*password"
          "app_password"
        )
        
        echo "# Manual Secrets Scan Report" > manual-secrets-report.md
        echo "" >> manual-secrets-report.md
        
        found_secrets=false
        for pattern in "${patterns[@]}"; do
          echo "Checking pattern: $pattern"
          matches=$(grep -r -i -n "$pattern" . --exclude-dir=".git" --exclude-dir="venv" --exclude="*.md" --exclude="*.log" 2>/dev/null || true)
          if [ ! -z "$matches" ]; then
            echo "‚ö†Ô∏è Potential secrets found for pattern: $pattern" >> manual-secrets-report.md
            echo "\`\`\`" >> manual-secrets-report.md
            echo "$matches" >> manual-secrets-report.md
            echo "\`\`\`" >> manual-secrets-report.md
            echo "" >> manual-secrets-report.md
            found_secrets=true
          fi
        done
        
        if [ "$found_secrets" = false ]; then
          echo "‚úÖ No obvious secrets patterns found" >> manual-secrets-report.md
        fi
        
        cat manual-secrets-report.md
        
    - name: Upload secrets scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: secrets-scan-${{ github.sha }}
        path: |
          trufflehog-report.json
          manual-secrets-report.md
        retention-days: 30

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ inputs.audit_type == 'full' || inputs.audit_type == 'code-quality' || !inputs.audit_type }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy || echo "‚ö†Ô∏è Some code quality tools failed to install"
        
    - name: Install project dependencies for type checking
      run: |
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt || echo "‚ö†Ô∏è Some dependencies failed to install"
        fi
        
    - name: Run flake8
      continue-on-error: true
      run: |
        echo "üîç Running flake8 linting..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics > flake8-critical.txt 2>&1 || echo "Critical flake8 issues found"
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics > flake8-full.txt 2>&1 || echo "Flake8 analysis completed"
        
    - name: Check code formatting with black
      continue-on-error: true
      run: |
        echo "üîç Checking code formatting..."
        black --check --diff . > black-report.txt 2>&1 || echo "Code formatting issues found"
        
    - name: Check import sorting with isort
      continue-on-error: true
      run: |
        echo "üîç Checking import sorting..."
        isort --check-only --diff . > isort-report.txt 2>&1 || echo "Import sorting issues found"
        
    - name: Run mypy type checking
      continue-on-error: true
      run: |
        echo "üîç Running type checking..."
        mypy . --ignore-missing-imports > mypy-report.txt 2>&1 || echo "Type checking completed with issues"
        
    - name: Generate code quality summary
      run: |
        echo "# Code Quality Report" > code-quality-summary.md
        echo "" >> code-quality-summary.md
        echo "## Analysis Results" >> code-quality-summary.md
        echo "" >> code-quality-summary.md
        
        # Summarize results
        if [ -f "flake8-critical.txt" ]; then
          critical_count=$(grep -c ":" flake8-critical.txt 2>/dev/null || echo "0")
          echo "- **Flake8 Critical Issues**: $critical_count" >> code-quality-summary.md
        fi
        
        if [ -f "black-report.txt" ]; then
          if grep -q "would reformat" black-report.txt; then
            echo "- **Black Formatting**: ‚ö†Ô∏è Issues found" >> code-quality-summary.md
          else
            echo "- **Black Formatting**: ‚úÖ Passed" >> code-quality-summary.md
          fi
        fi
        
        if [ -f "isort-report.txt" ]; then
          if grep -q "Fixing" isort-report.txt; then
            echo "- **Import Sorting**: ‚ö†Ô∏è Issues found" >> code-quality-summary.md
          else
            echo "- **Import Sorting**: ‚úÖ Passed" >> code-quality-summary.md
          fi
        fi
        
        echo "" >> code-quality-summary.md
        echo "*Generated on $(date)*" >> code-quality-summary.md
        
        cat code-quality-summary.md
        
    - name: Upload code quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-reports-${{ github.sha }}
        path: |
          flake8-*.txt
          black-report.txt
          isort-report.txt
          mypy-report.txt
          code-quality-summary.md
        retention-days: 30

  configuration-audit:
    name: Configuration Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ inputs.audit_type == 'full' || inputs.audit_type == 'configuration' || !inputs.audit_type }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Audit configuration files
      run: |
        echo "üîç Auditing configuration files..."
        
        echo "# Configuration Security Audit" > config-audit.md
        echo "" >> config-audit.md
        echo "## Findings" >> config-audit.md
        echo "" >> config-audit.md
        
        # Check for hardcoded secrets in config files
        config_files=$(find . -name "*.json" -o -name "*.yaml" -o -name "*.yml" -o -name "*.ini" -o -name "*.conf" | grep -v ".git" | grep -v "venv")
        
        for file in $config_files; do
          if [ -f "$file" ]; then
            echo "Checking $file..."
            
            # Look for potential security issues
            if grep -i -q "password\|secret\|key\|token" "$file" 2>/dev/null; then
              echo "- ‚ö†Ô∏è **$file**: Contains password/secret references" >> config-audit.md
            fi
            
            # Check for default/demo values
            if grep -i -q "demo\|test\|example\|dummy" "$file" 2>/dev/null; then
              echo "- ‚ö†Ô∏è **$file**: Contains demo/test values" >> config-audit.md
            fi
            
            # Check for overly permissive settings
            if grep -i -q "debug.*true\|allow.*all\|disable.*security" "$file" 2>/dev/null; then
              echo "- ‚ö†Ô∏è **$file**: Contains potentially insecure settings" >> config-audit.md
            fi
          fi
        done
        
        # Check file permissions
        echo "" >> config-audit.md
        echo "## File Permissions" >> config-audit.md
        for file in $config_files; do
          if [ -f "$file" ]; then
            perms=$(stat -c "%a" "$file" 2>/dev/null || echo "unknown")
            if [ "$perms" != "600" ] && [ "$perms" != "644" ]; then
              echo "- ‚ö†Ô∏è **$file**: Permissions $perms (consider 600 or 644)" >> config-audit.md
            else
              echo "- ‚úÖ **$file**: Permissions $perms" >> config-audit.md
            fi
          fi
        done
        
        echo "" >> config-audit.md
        echo "*Audit completed on $(date)*" >> config-audit.md
        
        cat config-audit.md
        
    - name: Upload configuration audit
      uses: actions/upload-artifact@v4
      with:
        name: config-audit-${{ github.sha }}
        path: config-audit.md
        retention-days: 30

  security-summary:
    name: Security Audit Summary
    runs-on: ubuntu-latest
    needs: [dependency-security-scan, secrets-scan, code-quality, configuration-audit]
    if: always()
    timeout-minutes: 5
    
    steps:
    - name: Download all reports
      uses: actions/download-artifact@v4
      with:
        path: reports/
        
    - name: Generate overall security report
      run: |
        echo "# üîí Security Audit Summary Report" > SECURITY_AUDIT_SUMMARY.md
        echo "" >> SECURITY_AUDIT_SUMMARY.md
        echo "**Audit Date:** $(date)" >> SECURITY_AUDIT_SUMMARY.md
        echo "**Commit:** ${{ github.sha }}" >> SECURITY_AUDIT_SUMMARY.md
        echo "**Branch:** ${{ github.ref_name }}" >> SECURITY_AUDIT_SUMMARY.md
        echo "" >> SECURITY_AUDIT_SUMMARY.md
        
        echo "## üìä Audit Results Overview" >> SECURITY_AUDIT_SUMMARY.md
        echo "" >> SECURITY_AUDIT_SUMMARY.md
        
        # Check job results
        dependency_result="${{ needs.dependency-security-scan.result }}"
        secrets_result="${{ needs.secrets-scan.result }}"
        quality_result="${{ needs.code-quality.result }}"
        config_result="${{ needs.configuration-audit.result }}"
        
        echo "| Audit Type | Status |" >> SECURITY_AUDIT_SUMMARY.md
        echo "|------------|--------|" >> SECURITY_AUDIT_SUMMARY.md
        echo "| Dependency Security | $dependency_result |" >> SECURITY_AUDIT_SUMMARY.md
        echo "| Secrets Detection | $secrets_result |" >> SECURITY_AUDIT_SUMMARY.md
        echo "| Code Quality | $quality_result |" >> SECURITY_AUDIT_SUMMARY.md
        echo "| Configuration Security | $config_result |" >> SECURITY_AUDIT_SUMMARY.md
        echo "" >> SECURITY_AUDIT_SUMMARY.md
        
        echo "## üìã Available Reports" >> SECURITY_AUDIT_SUMMARY.md
        echo "" >> SECURITY_AUDIT_SUMMARY.md
        
        # List available report files
        if [ -d "reports/" ]; then
          find reports/ -name "*.md" -o -name "*.json" -o -name "*.txt" | while read file; do
            echo "- \`$(basename "$file")\`" >> SECURITY_AUDIT_SUMMARY.md
          done
        fi
        
        echo "" >> SECURITY_AUDIT_SUMMARY.md
        echo "## üéØ Recommendations" >> SECURITY_AUDIT_SUMMARY.md
        echo "" >> SECURITY_AUDIT_SUMMARY.md
        echo "1. Review all security reports in the artifacts" >> SECURITY_AUDIT_SUMMARY.md
        echo "2. Address any critical vulnerabilities immediately" >> SECURITY_AUDIT_SUMMARY.md
        echo "3. Update dependencies regularly" >> SECURITY_AUDIT_SUMMARY.md
        echo "4. Follow secure coding practices" >> SECURITY_AUDIT_SUMMARY.md
        echo "5. Regularly audit configuration files" >> SECURITY_AUDIT_SUMMARY.md
        echo "" >> SECURITY_AUDIT_SUMMARY.md
        echo "---" >> SECURITY_AUDIT_SUMMARY.md
        echo "*Generated by MangaAnime Security Audit Pipeline*" >> SECURITY_AUDIT_SUMMARY.md
        
        cat SECURITY_AUDIT_SUMMARY.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-summary-${{ github.sha }}
        path: SECURITY_AUDIT_SUMMARY.md
        retention-days: 90