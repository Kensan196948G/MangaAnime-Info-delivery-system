name: Security Audit & Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security audit weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      audit_type:
        description: 'Type of security audit to run'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - dependencies
        - secrets
        - code-quality
        - configuration

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Job 1: Dependency Security Scan
  dependency-security-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.audit_type == 'full' || github.event.inputs.audit_type == 'dependencies' || github.event.inputs.audit_type == '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep pip-audit
        
    - name: Run pip-audit for dependency vulnerabilities
      run: |
        echo "üîç Scanning Python dependencies for known vulnerabilities..."
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --format=text
        
    - name: Run Safety check
      run: |
        echo "üîç Running Safety dependency vulnerability check..."
        safety check --json --output=safety-report.json || true
        safety check
        
    - name: Analyze requirements files
      run: |
        echo "üìã Analyzing requirements files..."
        
        if [ -f requirements.txt ]; then
            echo "‚úÖ requirements.txt found"
            echo "Dependencies count: $(wc -l < requirements.txt)"
        fi
        
        if [ -f requirements-dev.txt ]; then
            echo "‚úÖ requirements-dev.txt found"
            echo "Dev dependencies count: $(wc -l < requirements-dev.txt)"
        fi
        
        # Check for pinned versions
        unpinned_deps=$(grep -v "==" requirements.txt | grep -v "^#" | grep -v "^$" | wc -l || echo "0")
        echo "Unpinned dependencies: $unpinned_deps"
        
        if [ "$unpinned_deps" -gt 0 ]; then
            echo "‚ö†Ô∏è  Consider pinning dependency versions for security"
        else
            echo "‚úÖ All dependencies are pinned"
        fi
        
    - name: Upload dependency scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-security-reports
        path: |
          pip-audit-report.json
          safety-report.json

  # Job 2: Secrets Detection
  secrets-detection:
    name: Secrets Detection
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.audit_type == 'full' || github.event.inputs.audit_type == 'secrets' || github.event.inputs.audit_type == '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for secret scanning
        
    - name: Run TruffleHog for secrets detection
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: Custom secrets pattern check
      run: |
        echo "üîç Running custom secrets pattern detection..."
        
        # Define patterns to search for
        secret_patterns=(
            "password\s*=\s*['\"][^'\"]*['\"]"
            "api_key\s*=\s*['\"][^'\"]*['\"]"
            "secret\s*=\s*['\"][^'\"]*['\"]"
            "token\s*=\s*['\"][^'\"]*['\"]"
            "AKIA[0-9A-Z]{16}"  # AWS Access Key
            "sk_live_[0-9a-zA-Z]{24}"  # Stripe Live Key
            "pk_live_[0-9a-zA-Z]{24}"  # Stripe Publishable Key
        )
        
        findings=0
        for pattern in "${secret_patterns[@]}"; do
            echo "Checking pattern: $pattern"
            matches=$(grep -r -E "$pattern" . --exclude-dir=.git --exclude-dir=venv --exclude-dir=node_modules --exclude="*.pyc" || true)
            if [ -n "$matches" ]; then
                echo "‚ö†Ô∏è  Potential secret found:"
                echo "$matches"
                ((findings++))
            fi
        done
        
        if [ $findings -eq 0 ]; then
            echo "‚úÖ No obvious secrets detected in code"
        else
            echo "‚ö†Ô∏è  $findings potential secret patterns found - review required"
        fi
        
    - name: Check configuration files for secrets
      run: |
        echo "üîç Checking configuration files for exposed secrets..."
        
        config_files=(
            "config.json"
            "config.json.template"
            ".env"
            ".env.example"
        )
        
        for file in "${config_files[@]}"; do
            if [ -f "$file" ]; then
                echo "Checking: $file"
                
                # Check for common secret indicators
                if grep -q "password.*:" "$file" && ! grep -q "password.*:\s*\"\"" "$file" && ! grep -q "password.*:\s*null" "$file"; then
                    echo "‚ö†Ô∏è  $file may contain password values"
                fi
                
                if grep -q "secret.*:" "$file" && ! grep -q "secret.*:\s*\"\"" "$file" && ! grep -q "secret.*:\s*null" "$file"; then
                    echo "‚ö†Ô∏è  $file may contain secret values"
                fi
                
                if grep -q "key.*:" "$file" && ! grep -q "key.*:\s*\"\"" "$file" && ! grep -q "key.*:\s*null" "$file"; then
                    echo "‚ö†Ô∏è  $file may contain key values"
                fi
            fi
        done
        
        echo "‚úÖ Configuration file check completed"

  # Job 3: Code Quality Security Analysis
  code-quality-security:
    name: Code Quality Security Analysis
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.audit_type == 'full' || github.event.inputs.audit_type == 'code-quality' || github.event.inputs.audit_type == '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install code analysis tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit flake8 mypy pylint black isort
        pip install -r requirements.txt
        
    - name: Run Bandit security linter
      run: |
        echo "üîç Running Bandit security analysis..."
        bandit -r modules/ -f json -o bandit-security-report.json || true
        bandit -r modules/ -f txt
        
    - name: Run Flake8 linting
      run: |
        echo "üîç Running Flake8 code quality check..."
        flake8 modules/ --count --statistics --tee --output-file=flake8-report.txt || true
        
    - name: Run MyPy type checking
      run: |
        echo "üîç Running MyPy type checking..."
        mypy modules/ --ignore-missing-imports --txt-report mypy-report/ || true
        
    - name: Run Pylint analysis
      run: |
        echo "üîç Running Pylint code analysis..."
        pylint modules/ --output-format=json > pylint-report.json || true
        pylint modules/ --output-format=text || true
        
    - name: Check code formatting
      run: |
        echo "üîç Checking code formatting with Black..."
        black --check --diff modules/ || true
        
        echo "üîç Checking import sorting with isort..."
        isort --check-only --diff modules/ || true
        
    - name: Generate code quality summary
      run: |
        echo "üìä Generating code quality summary..."
        
        cat > code-quality-summary.md << EOF
        # Code Quality Security Summary
        
        ## Security Analysis (Bandit)
        $(if [ -f bandit-security-report.json ]; then echo "- Security report generated"; else echo "- No security issues file"; fi)
        
        ## Code Quality (Flake8)
        $(if [ -f flake8-report.txt ]; then echo "- Linting report generated"; else echo "- No linting issues"; fi)
        
        ## Type Checking (MyPy)
        $(if [ -d mypy-report ]; then echo "- Type checking report generated"; else echo "- No type checking issues"; fi)
        
        ## Code Analysis (Pylint)
        $(if [ -f pylint-report.json ]; then echo "- Code analysis report generated"; else echo "- No analysis issues"; fi)
        
        ## Recommendations
        - Review all security findings in Bandit report
        - Address linting issues for code consistency
        - Fix type checking errors for better reliability
        - Consider code analysis suggestions for maintainability
        
        ---
        Generated: $(date -u +%Y-%m-%dT%H:%M:%SZ)
        EOF
        
    - name: Upload code quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-reports
        path: |
          bandit-security-report.json
          flake8-report.txt
          mypy-report/
          pylint-report.json
          code-quality-summary.md

  # Job 4: Configuration Security Audit
  configuration-security-audit:
    name: Configuration Security Audit
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.audit_type == 'full' || github.event.inputs.audit_type == 'configuration' || github.event.inputs.audit_type == '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Audit system configuration
      run: |
        echo "üîç Auditing system configuration security..."
        
        # Check file permissions
        echo "## File Permissions Audit"
        
        # Check for executable files
        echo "Executable files:"
        find . -type f -executable -not -path "./.git/*" -not -path "./venv/*" | head -20
        
        # Check for world-writable files
        world_writable=$(find . -type f -perm -002 -not -path "./.git/*" -not -path "./venv/*" | wc -l)
        echo "World-writable files: $world_writable"
        
        if [ "$world_writable" -gt 0 ]; then
            echo "‚ö†Ô∏è  World-writable files found - security risk!"
            find . -type f -perm -002 -not -path "./.git/*" -not -path "./venv/*"
        else
            echo "‚úÖ No world-writable files found"
        fi
        
    - name: Audit configuration files
      run: |
        echo "üîç Auditing configuration file security..."
        
        # Check config.json security
        if [ -f config.json ]; then
            echo "Analyzing config.json..."
            
            # Check for debug mode
            if grep -q '"debug".*true' config.json; then
                echo "‚ö†Ô∏è  Debug mode enabled in configuration"
            else
                echo "‚úÖ Debug mode not enabled"
            fi
            
            # Check for test mode
            if grep -q '"test_mode".*true' config.json; then
                echo "‚ö†Ô∏è  Test mode enabled in configuration"
            else
                echo "‚úÖ Test mode disabled"
            fi
            
            # Check for SSL/TLS settings
            if grep -q '"use_tls".*true' config.json; then
                echo "‚úÖ TLS enabled for email"
            else
                echo "‚ö†Ô∏è  TLS not explicitly enabled"
            fi
            
        fi
        
    - name: Audit service configurations
      run: |
        echo "üîç Auditing service configuration security..."
        
        # Check systemd service file
        if [ -f mangaanime-web.service ]; then
            echo "Analyzing systemd service file..."
            
            # Check user/group settings
            if grep -q "User=" mangaanime-web.service && ! grep -q "User=root" mangaanime-web.service; then
                echo "‚úÖ Service runs as non-root user"
            else
                echo "‚ö†Ô∏è  Service user configuration needs review"
            fi
            
            # Check restart policy
            if grep -q "Restart=always" mangaanime-web.service; then
                echo "‚úÖ Service has restart policy"
            fi
        fi
        
    - name: Network security audit
      run: |
        echo "üîç Network security configuration audit..."
        
        # Check for hardcoded IPs
        hardcoded_ips=$(grep -r -E "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" . --exclude-dir=.git --exclude-dir=venv --exclude="*.pyc" | grep -v "127.0.0.1" | grep -v "0.0.0.0" | wc -l || echo "0")
        echo "Hardcoded IP addresses found: $hardcoded_ips"
        
        if [ "$hardcoded_ips" -gt 0 ]; then
            echo "‚ö†Ô∏è  Hardcoded IP addresses found - consider using configuration"
        else
            echo "‚úÖ No hardcoded IP addresses detected"
        fi
        
        # Check for localhost bindings
        localhost_bindings=$(grep -r "0.0.0.0" . --exclude-dir=.git --exclude-dir=venv --exclude="*.pyc" | wc -l || echo "0")
        echo "Localhost bindings (0.0.0.0): $localhost_bindings"
        
        if [ "$localhost_bindings" -gt 0 ]; then
            echo "‚ÑπÔ∏è  Service binds to all interfaces - ensure firewall is configured"
        fi

  # Job 5: Security Summary Report
  security-summary-report:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [dependency-security-scan, secrets-detection, code-quality-security, configuration-security-audit]
    if: always()
    
    steps:
    - name: Download all security reports
      uses: actions/download-artifact@v3
      
    - name: Generate comprehensive security report
      run: |
        echo "üìä Generating comprehensive security report..."
        
        cat > security-audit-report.md << EOF
        # MangaAnime System Security Audit Report
        
        **Audit Date:** $(date -u +%Y-%m-%dT%H:%M:%SZ)
        **Git Commit:** ${{ github.sha }}
        **Branch:** ${{ github.ref_name }}
        **Workflow Run:** ${{ github.run_number }}
        
        ## Audit Results Summary
        
        ### Dependency Security Scan
        $(if [[ "${{ needs.dependency-security-scan.result }}" == "success" ]]; then echo "‚úÖ PASSED"; else echo "‚ùå FAILED"; fi)
        - Scanned Python dependencies for known vulnerabilities
        - Checked for unpinned dependency versions
        
        ### Secrets Detection
        $(if [[ "${{ needs.secrets-detection.result }}" == "success" ]]; then echo "‚úÖ PASSED"; else echo "‚ùå FAILED"; fi)
        - Performed secrets pattern matching
        - Analyzed configuration files for exposed credentials
        
        ### Code Quality Security
        $(if [[ "${{ needs.code-quality-security.result }}" == "success" ]]; then echo "‚úÖ PASSED"; else echo "‚ùå FAILED"; fi)
        - Bandit security linting
        - Code quality and type checking
        - Formatting and style consistency
        
        ### Configuration Security
        $(if [[ "${{ needs.configuration-security-audit.result }}" == "success" ]]; then echo "‚úÖ PASSED"; else echo "‚ùå FAILED"; fi)
        - File permissions audit
        - Service configuration review
        - Network security settings
        
        ## Priority Recommendations
        
        ### High Priority
        $(if [[ "${{ needs.secrets-detection.result }}" != "success" ]]; then echo "- üî¥ Address secrets detection findings immediately"; fi)
        $(if [[ "${{ needs.dependency-security-scan.result }}" != "success" ]]; then echo "- üî¥ Update vulnerable dependencies"; fi)
        
        ### Medium Priority
        $(if [[ "${{ needs.code-quality-security.result }}" != "success" ]]; then echo "- üü° Fix code quality and security issues"; fi)
        $(if [[ "${{ needs.configuration-security-audit.result }}" != "success" ]]; then echo "- üü° Review configuration security settings"; fi)
        
        ### General Recommendations
        - Regularly update dependencies to latest secure versions
        - Monitor security advisories for used packages
        - Implement least-privilege access controls
        - Enable comprehensive logging and monitoring
        - Regular security audits and penetration testing
        
        ## Compliance Status
        
        - ‚úÖ No hardcoded secrets in code
        - ‚úÖ Dependencies vulnerability scanning
        - ‚úÖ Code security analysis
        - ‚úÖ Configuration security review
        
        ## Next Steps
        
        1. Review and address all high-priority findings
        2. Schedule dependency updates
        3. Implement additional security controls as needed
        4. Plan next security audit
        
        ---
        **Security Audit completed by GitHub Actions CI/CD Pipeline**
        
        For detailed findings, review individual audit reports in the artifacts.
        EOF
        
    - name: Upload comprehensive security report
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-security-report
        path: security-audit-report.md
        
    - name: Comment security report on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-audit-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });