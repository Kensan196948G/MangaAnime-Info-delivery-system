name: Claude Simple Responder

on:
  issue_comment:
    types: [created]
  issues:
    types: [opened]

jobs:
  respond:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'issues' && contains(github.event.issue.body, '@claude'))
    
    steps:
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install anthropic
      run: pip install anthropic
    
    - name: Respond with Claude
      env:
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
        ISSUE_TITLE: ${{ github.event.issue.title }}
        ISSUE_BODY: ${{ github.event.issue.body }}
        COMMENT_BODY: ${{ github.event.comment.body }}
        USER_NAME: ${{ github.event.comment.user.login || github.event.issue.user.login }}
        EVENT_NAME: ${{ github.event_name }}
      run: |
        python3 << 'EOF'
        import os
        import json
        import urllib.request
        
        # 環境変数取得
        api_key = os.environ.get('CLAUDE_API_KEY')
        if not api_key:
            print("ERROR: CLAUDE_API_KEY not found")
            exit(1)
        
        issue_number = os.environ.get('ISSUE_NUMBER')
        issue_title = os.environ.get('ISSUE_TITLE', '')
        issue_body = os.environ.get('ISSUE_BODY', '')
        comment_body = os.environ.get('COMMENT_BODY', '')
        user_name = os.environ.get('USER_NAME', 'unknown')
        event_name = os.environ.get('EVENT_NAME', '')
        
        # Issueオープン時は本文から、コメント時はコメントから@claudeを除去
        if event_name == 'issues':
            query = issue_body.replace('@claude', '').strip()
        else:
            query = comment_body.replace('@claude', '').strip()
        
        # クエリが空の場合、Issueの内容を含めて分析
        if not query:
            context = f"Issue Title: {issue_title}\n\nIssue Body:\n{issue_body}"
            query = f"以下のIssueの内容を分析して、問題の原因と解決策を日本語で提案してください。\n\n{context}"
        
        print(f"Processing request from {user_name}")
        print(f"Query: {query[:100]}")
        
        try:
            from anthropic import Anthropic
            
            # Claude API 呼び出し
            client = Anthropic(api_key=api_key)
            message = client.messages.create(
                model="claude-3-haiku-20240307",
                max_tokens=800,
                messages=[{"role": "user", "content": query}]
            )
            
            response_text = message.content[0].text
            
            # GitHub コメント作成
            comment = f"## 🤖 Claude Response\n\n{response_text}\n\n---\n*Requested by @{user_name}*"
            
            # GitHub API URL
            api_url = f"https://api.github.com/repos/{os.environ['GITHUB_REPOSITORY']}/issues/{issue_number}/comments"
            
            # リクエスト作成
            data = json.dumps({'body': comment}).encode('utf-8')
            headers = {
                'Authorization': f"token {os.environ['GITHUB_TOKEN']}",
                'Accept': 'application/vnd.github.v3+json',
                'Content-Type': 'application/json'
            }
            
            req = urllib.request.Request(api_url, data=data, headers=headers)
            response = urllib.request.urlopen(req)
            
            print(f"SUCCESS: Posted response to Issue #{issue_number}")
            
        except Exception as e:
            print(f"ERROR: {str(e)}")
            
            # エラーコメント投稿
            error_comment = f"## ⚠️ Error\n\nClaude API エラーが発生しました。\n\n```\n{str(e)[:200]}\n```"
            
            try:
                data = json.dumps({'body': error_comment}).encode('utf-8')
                req = urllib.request.Request(api_url, data=data, headers=headers)
                urllib.request.urlopen(req)
            except:
                pass
            
            exit(1)
        EOF