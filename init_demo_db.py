#!/usr/bin/env python3
"""
Demo Database Initializer for Web UI Testing
This script creates sample data for testing the web interface.
"""

import sqlite3
import json
from datetime import datetime, timedelta
import random

def create_database():
    """Create the SQLite database with sample data"""
    
    # Connect to database
    conn = sqlite3.connect('db.sqlite3')
    cursor = conn.cursor()
    
    # Create tables
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS works (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            title_kana TEXT,
            title_en TEXT,
            type TEXT CHECK(type IN ('anime','manga')),
            official_url TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS releases (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            work_id INTEGER NOT NULL,
            release_type TEXT CHECK(release_type IN ('episode','volume')),
            number TEXT,
            platform TEXT,
            release_date DATE,
            source TEXT,
            source_url TEXT,
            notified INTEGER DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(work_id, release_type, number, platform, release_date),
            FOREIGN KEY (work_id) REFERENCES works (id)
        )
    ''')
    
    # Sample works data
    sample_works = [
        # Anime
        ('È¨ºÊªÖ„ÅÆÂàÉ', '„Åç„ÇÅ„Å§„ÅÆ„ÇÑ„ÅÑ„Å∞', 'Demon Slayer', 'anime', 'https://kimetsu.com'),
        ('ÈÄ≤ÊíÉ„ÅÆÂ∑®‰∫∫', '„Åó„Çì„Åí„Åç„ÅÆ„Åç„Çá„Åò„Çì', 'Attack on Titan', 'anime', 'https://shingeki.tv'),
        ('Âë™Ë°ìÂªªÊà¶', '„Åò„ÇÖ„Åò„ÇÖ„Å§„Åã„ÅÑ„Åõ„Çì', 'Jujutsu Kaisen', 'anime', 'https://jujutsukaisen.jp'),
        ('„ÉØ„É≥„Éî„Éº„Çπ', '„Çè„Çì„Å¥„Éº„Åô', 'One Piece', 'anime', 'https://www.toei-anim.co.jp/tv/onep/'),
        ('ÂÉï„ÅÆ„Éí„Éº„É≠„Éº„Ç¢„Ç´„Éá„Éü„Ç¢', '„Åº„Åè„ÅÆ„Å≤„Éº„Çç„Éº„ÅÇ„Åã„Åß„Åø„ÅÇ', 'My Hero Academia', 'anime', 'https://heroaca.com'),
        
        # Manga
        ('„ÉØ„É≥„Éî„Éº„Çπ', '„Çè„Çì„Å¥„Éº„Åô', 'One Piece', 'manga', 'https://one-piece.com'),
        ('È¨ºÊªÖ„ÅÆÂàÉ', '„Åç„ÇÅ„Å§„ÅÆ„ÇÑ„ÅÑ„Å∞', 'Demon Slayer', 'manga', 'https://kimetsu.com'),
        ('Âë™Ë°ìÂªªÊà¶', '„Åò„ÇÖ„Åò„ÇÖ„Å§„Åã„ÅÑ„Åõ„Çì', 'Jujutsu Kaisen', 'manga', 'https://jujutsukaisen.jp'),
        ('„ÉÅ„Çß„É≥„ÇΩ„Éº„Éû„É≥', '„Å°„Åá„Çì„Åù„Éº„Åæ„Çì', 'Chainsaw Man', 'manga', 'https://chainsawman.dog'),
        ('„Çπ„Éë„Ç§„Éï„Ç°„Éü„É™„Éº', '„Åô„Å±„ÅÑ„Åµ„ÅÅ„Åø„Çä„Éº', 'SPY√óFAMILY', 'manga', 'https://spy-family.net'),
    ]
    
    # Insert sample works
    cursor.executemany('''
        INSERT OR IGNORE INTO works (title, title_kana, title_en, type, official_url)
        VALUES (?, ?, ?, ?, ?)
    ''', sample_works)
    
    # Get work IDs
    cursor.execute('SELECT id, title, type FROM works')
    works = cursor.fetchall()
    
    # Sample platforms
    anime_platforms = ['Netflix', 'Amazon Prime Video', 'Crunchyroll', 'Funimation', 'd„Ç¢„Éã„É°„Çπ„Éà„Ç¢', 'ABEMA']
    manga_platforms = ['BookWalker', 'Kindle', 'Ê•ΩÂ§©Kobo', 'ComicWalker', '„Éû„Ç¨„Éù„Ç±', '„Ç∏„É£„É≥„Éó+']
    
    # Generate sample releases
    releases = []
    today = datetime.now()
    
    for work_id, title, work_type in works:
        platform_list = anime_platforms if work_type == 'anime' else manga_platforms
        
        # Generate releases for the past month and next month
        for days_offset in range(-30, 31, random.randint(1, 7)):
            release_date = today + timedelta(days=days_offset)
            
            # Random chance of having a release on this day
            if random.random() < 0.3:  # 30% chance
                platform = random.choice(platform_list)
                release_type = 'episode' if work_type == 'anime' else 'volume'
                
                # Generate episode/volume number
                if release_type == 'episode':
                    number = str(random.randint(1, 24))
                else:
                    number = str(random.randint(1, 30))
                
                # Notification status (70% notified for past releases)
                notified = 1 if (days_offset < 0 and random.random() < 0.7) else 0
                
                releases.append((
                    work_id,
                    release_type,
                    number,
                    platform,
                    release_date.strftime('%Y-%m-%d'),
                    'demo_source',
                    f'https://example.com/{work_type}/{work_id}/{number}',
                    notified
                ))
    
    # Insert releases
    cursor.executemany('''
        INSERT OR IGNORE INTO releases 
        (work_id, release_type, number, platform, release_date, source, source_url, notified)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', releases)
    
    # Commit and close
    conn.commit()
    conn.close()
    
    print(f"‚úÖ „Éá„Éº„Çø„Éô„Éº„Çπ‰ΩúÊàêÂÆå‰∫Ü: {len(sample_works)}‰ΩúÂìÅ„ÄÅ{len(releases)}„É™„É™„Éº„Çπ„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü")

def create_sample_config():
    """Create a sample configuration file"""
    
    config = {
        "ng_keywords": [
            "„Ç®„É≠",
            "R18",
            "Êàê‰∫∫Âêë„Åë",
            "BL",
            "ÁôæÂêà",
            "„Éú„Éº„Ç§„Ç∫„É©„Éñ"
        ],
        "notification_email": "example@gmail.com",
        "check_interval_hours": 24,
        "enabled_sources": {
            "anilist": True,
            "shobo_calendar": True,
            "bookwalker_rss": True,
            "mangapocket_rss": True
        }
    }
    
    with open('config.json', 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ „Çµ„É≥„Éó„É´Ë®≠ÂÆö„Éï„Ç°„Ç§„É´‰ΩúÊàêÂÆå‰∫Ü: config.json")

def create_sample_log():
    """Create a sample log file"""
    import os
    
    os.makedirs('logs', exist_ok=True)
    
    sample_logs = [
        f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - INFO - „Ç∑„Çπ„ÉÜ„É†ÈñãÂßã",
        f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - INFO - „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂öÊàêÂäü",
        f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - INFO - Ë®≠ÂÆö„Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü",
        f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - INFO - AniList API„Åã„Çâ„Éá„Éº„ÇøÂèñÂæóÈñãÂßã",
        f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - INFO - 15‰ª∂„ÅÆÊñ∞„Åó„ÅÑ„É™„É™„Éº„Çπ„ÇíÁô∫Ë¶ã",
        f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - WARNING - ‰∏ÄÈÉ®„ÅÆRSS„Éï„Ç£„Éº„Éâ„ÅåÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü",
        f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - INFO - ÈÄöÁü•„É°„Éº„É´ÈÄÅ‰ø°: 3‰ª∂",
        f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - INFO - Google„Ç´„É¨„É≥„ÉÄ„ÉºÊõ¥Êñ∞ÂÆå‰∫Ü",
        f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - INFO - ÂÆüË°åÂÆå‰∫Ü",
    ]
    
    with open('logs/system.log', 'w', encoding='utf-8') as f:
        for log_entry in sample_logs:
            f.write(log_entry + '\n')
    
    print("‚úÖ „Çµ„É≥„Éó„É´„É≠„Ç∞„Éï„Ç°„Ç§„É´‰ΩúÊàêÂÆå‰∫Ü: logs/system.log")

def main():
    """Main function"""
    print("=" * 60)
    print("„Éá„É¢„Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñ„Çπ„ÇØ„É™„Éó„Éà")
    print("=" * 60)
    print()
    
    try:
        create_database()
        create_sample_config()
        create_sample_log()
        
        print()
        print("üéâ ÂàùÊúüÂåñÂÆå‰∫ÜÔºÅ")
        print()
        print("Web UI„ÇíËµ∑Âãï„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö")
        print("  python3 start_web_ui.py")
        print()
        print("„Éñ„É©„Ç¶„Ç∂„Åß‰ª•‰∏ã„Å´„Ç¢„ÇØ„Çª„ÇπÔºö")
        print("  http://localhost:5000")
        print()
        
    except Exception as e:
        print(f"‚ùå „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {e}")
        return 1
    
    return 0

if __name__ == '__main__':
    exit(main())